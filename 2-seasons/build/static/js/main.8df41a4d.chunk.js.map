{"version":3,"sources":["components/SeasonDisplay.js","components/Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","season","latitude","month","getSeason","Date","getMonth","className","Spinner","message","class","defaultProps","App","useState","setLatitude","errorMessage","setErrorMessage","useEffect","window","navigator","geolocation","getCurrentPosition","position","coords","err","ReactDOM","render","document","querySelector"],"mappings":"kLAGMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAM,sBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,sBACNC,SAAU,eAyBHE,EAbO,SAAC,GAAkB,IAC/BC,EATQ,SAACC,EAAUC,GACzB,OAAI,GAAKA,GAASA,GAAQ,EACfD,EAAW,EAAI,SAAW,SAE1BA,EAAW,EAAI,SAAW,SAKtBE,CADqB,EAAfF,UACc,IAAIG,MAAOC,YADV,EAETX,EAAaM,GAAhCJ,EAF4B,EAE5BA,KAAMC,EAFsB,EAEtBA,SAEd,OACI,sBAAKS,UAAS,yBAAoBN,GAAlC,UACI,mBAAGM,UAAS,4BAAwBT,EAAxB,WACZ,6BAAKD,IACL,mBAAGU,UAAS,6BAAyBT,EAAzB,eC5BlBU,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf,OACI,qBAAKC,MAAM,mBAAX,SACI,qBAAKA,MAAM,qBAAX,SACKD,OAMjBD,EAAQG,aAAe,CACnBF,QAAS,cAGED,QCXTI,EAAM,WAAO,IAAD,EACkBC,mBAAS,MAD3B,mBACPX,EADO,KACGY,EADH,OAE0BD,mBAAS,IAFnC,mBAEPE,EAFO,KAEOC,EAFP,KAWd,OAPAC,qBAAU,WACNC,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GAAQ,OAAIR,EAAYQ,EAASC,OAAOrB,aACxC,SAAAsB,GAAG,OAAIR,EAAgBQ,EAAIf,cAEhC,IAGC,8BAGQM,IAAiBb,EACb,yCAAYa,MACbA,GAAgBb,EACf,cAAC,EAAD,CAAeA,SAAUA,IAEzB,cAAC,EAAD,CAASO,QAAQ,uCAMrCgB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.8df41a4d.chunk.js","sourcesContent":["import React from 'react';\nimport './SeasonDisplay.css';\n\nconst seasonConfig = {\n    summer: {\n        text: 'This is summer now!',\n        iconName: 'sun'\n    },\n    winter: {\n        text: 'This is winter now!',\n        iconName: 'snowflake'\n    }\n};\n\nconst getSeason = (latitude, month) => {\n    if (3 <= month && month <=8) {\n        return latitude > 0 ? 'summer' : 'winter';\n    } else {\n        return latitude > 0 ? 'winter' : 'summer';\n    }\n};\n\nconst SeasonDisplay = ({ latitude }) => {\n    const season = getSeason(latitude, new Date().getMonth());\n    const { text, iconName } = seasonConfig[season];\n\n    return (\n        <div className={`season-display ${season}`}>\n            <i className= {`icon-left massive ${iconName} icon`} />\n            <h1>{text}</h1>\n            <i className= {`icon-right massive ${iconName} icon`} />\n        </div>\n    )\n}\n\nexport default SeasonDisplay;\n","import React from 'react';\n\nconst Spinner = ({ message }) => {\n    return (\n        <div class=\"ui active dimmer\">\n            <div class=\"ui big text loader\">\n                {message}\n            </div>\n        </div>\n    );\n};\n\nSpinner.defaultProps = {\n    message: 'Loading...'\n};\n\nexport default Spinner;\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './components/SeasonDisplay';\nimport Spinner from './components/Spinner';\n\nconst App = () => {\n    const [latitude, setLatitude] = useState(null);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        window.navigator.geolocation.getCurrentPosition(\n            position => setLatitude(position.coords.latitude),\n            err => setErrorMessage(err.message)\n        );\n    }, []);\n\n    return (\n        <div>\n            \n            {\n                errorMessage && !latitude ?\n                    <h1>Error: {errorMessage}</h1>\n                : !errorMessage && latitude ?\n                    <SeasonDisplay latitude={latitude} />\n                :\n                    <Spinner message='Please accept location request.' />\n            }\n        </div>\n    );\n};\n\nReactDOM.render(<App />, document.querySelector('#root'))"],"sourceRoot":""}